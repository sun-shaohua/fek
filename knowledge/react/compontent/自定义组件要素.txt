组件设计的要素
一、为什么要设计组件？
  1.在大型的软件开发系统中，随着技术的发展，前端的开发复杂度也越来越高，传统的开发模式存在开发效率低，维护成本高的问题。
  传统开发效应低以及难以维护的原因：在于很多时候将一个系统做成一整个模块，随着业务的变更和扩展，系统的复杂度成指数的增长，针对次问题，
  我们更希望将一个大型的项目拆分成多个独立的，互相不影响的小项目，这几个小项目可以独立开发，独立部署，也可以随意的进行组合
  2.在前端开发中，组件开发的重要性，可以将重复出现的部分封装成组件进行使用，设计一个高可用的组件，可以减少不必要重复的代码，同时也降低代码的复杂度
二、组件的设计原则
  1.职责单一
   （1）职责的单一保证了组件的最细粒度，并且有利于组件复用。但是颗粒度过于细的话会导致组件碎化，所以组件的颗粒度应在组件复用的基础上。
   （2）单一职责同时也具备简化组件的能力，遵守该原则在一定程度上能够使代码足够简单，意味着易读、易维护。
  2.封装
    良好的组件封装应该隐藏内部细节和实现意义，并通过props来控制行为和输出（单向数据流）。
    同时还要具备减少访问全局变量能力，因为访问全局变量会打破封装，创造了不可预测的行为，并且使测试变得困难。可以将全局变量作为组件的props，而不是直接引用。

    封装能够将不用逻辑代码分离，能够帮助开发中快速定位问题。
  3.组合
    单一责任原则描述了如何将需求拆分为组件，封装描述了如何组织这些组件，组合描述了如何将整个系统粘合在一起。
    具有多个功能的组件，应该转换为多个单一职责的小组件， 这些小的组件又可以组合成为一个职责更大、功能单一的组件，比如时间选择组件就是由选择组件、输入组件等组合而成；

  4、复用
  通常来说我们进行组件设计的目的有两种：
  1）抽取公共功能部分，方便复用（例如基础组件）；
  2）复杂设计/功能分解，便于代码管理和提高代码阅读性（例如业务组件）；
  本篇文章中所将的更多的是针对第一个目的而言，提高组件的复用性，使得一处代码的封装能够在各个不同的地方使用。复用性能够使代码的修改/编辑更加方便，只需要修改组件代码，各个引用的地方会同步进行修改和更新。

  5、富有意义
  富有意思更多的是指代码的描述意义和可读性。在实际开发中，开发人员大部分时间都在阅读和理解代码，而不是实际编写代码。
  有意义包含的范围很广，凡是有助于代码理解和使用的都可以归为有意义，例如：
  项目名、函数名、变量名、类名等使用符合含义的命名；
  html语义化；
  合理的代码注释；


  6、可测试
  现在前端开发过程中一直都在强调单元测试，一个完整的项目单测是不可缺少的一部分，单测可以保证代码正确性、一部分依赖的正确性、以及减少调试时间等。
  单元测试的目的不是为了代码覆盖率，而是为了减少bug出现的概率，以及防止bug回归。小公司人力不足，不应该盲目为了提高覆盖率浪费人力，而是要写关键代码的关键测试。

三、实现细节
   1.减少类型的声明，声明的类型越多，代码的复杂度就会提高，在设计组件时尽量保存类型的一致性。类型尽量保存一致同时可以避免在组件内部逻辑编写的时候类型转换逻辑的存在。
   2.划分css边界，关于组件内部的实现细节部分的css应编写在组件内部，对外部其他元素布局有影响的样式，应编写在具体使用的组件处的文件中

Component:
 使用非常比较广泛，它的核心意义在于复用，相对模块，对于依赖性有更高的要求。
Module:
 它的核心意义是分离职责，属于代码级模块化的产出。它本身是提供服务的功能逻辑，是一组具有一定内聚性代码的组合，职责明确。

   组件(Component)和模块(Module)是一对容易混淆的名词，也常常被用来相互替换。
   个人总结，从设计上来看，组件强调复用，模块强调职责(内聚、分离)，或者说组件是达到可复用要求的模块
   前端Web应用中的组件，是指一些设计为通用性的，用来构建较大型应用程序的软件，这些组件有多种表现形式。
它可以是有UI（用户界面）的，也可以是作为 “服务”的纯逻辑代码。因为有视觉上的表现形式，UI组件更容易理解。UI组件简单的例子包括按钮、输入框和文本域。
不论是汉堡包状的菜单按钮（无论你是否喜欢）、标签页、日历、选项菜单或者所见即所得的富文本编辑器则是一些更加高级的例子。
提供服务类型的组件可能会让人难以理解，这种类型的例子包括跨浏览器的AJAX支持，日志记录或者提供某种数据持久化的功能。
基于组件开发，最重要的就是组件可以用来构成其他组件，而富文本编辑器就是个很好的例子。它是由按钮、下拉菜单和一些可视化组件等组成。
另一个例子是HTML5上的video元素。它同样包含按钮，也同时含有一个能从视频数据流渲染内容的元素。
